# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env(API_ASSETS_PATH): '/'
    public_dir: '%kernel.project_dir%/public'
    video_upload_dir: '%kernel.project_dir%/public/uploads/videos'
    video_upload_path: '%env(string:PUBLIC_UPLOADS_PATH)%/videos'
    preview_upload_dir: '%kernel.project_dir%/public/uploads/preview'
    preview_upload_path: '%env(string:PUBLIC_UPLOADS_PATH)%/preview'
    api_project_domain: '%env(string:API_PROJECT_DOMAIN)%'
    cms_project_domain: '%env(string:CMS_PROJECT_DOMAIN)%'
    cdn_domain: '%env(string:CDN_DOMAIN)%'
    cdn_enabled: '%env(bool:CDN_ENABLED)%'
    app.route_prefix: '%env(API_PROJECT_ROUTE_PREFIX)%'
    projectEmail: '%env(EMAIL)%'
    projectEmailName: '%env(EMAIL_NAME)%'
    streamKey: '%env(STREAM_KEY)%'
    streamSecret: '%env(STREAM_SECRET)%'
    s3_bucket: '%env(string:AWS_S3_BUCKET)%'
    s3_backup_bucket: '%env(string:AWS_S3_BACKUP_BUCKET)%'
    app.env: '%env(string:APP_ENV)%'        #dev, test, prod
    app.server: '%env(string:APP_SERVER)%'  #dev, stage, prod
    slack.key: '%env(string:SLACK_KEY)%'
    slack.chaters.key: '%env(string:SLACK_CHATERS_KEY)%'
    slack.token: '%env(string:SLACK_TOKEN)%'
    slack.channel.error: '%env(string:SLACK_CHANNEL_ERROR)%'
    amplitude_api_key: '%env(string:AMPLITUDE_API_KEY)%'
    ai.domain: '%env(string:AI_PROJECT_DOMAIN)%'

framework:
    assets:
        #base_path: ''
        #base_path: '/api/public/'
        base_path: '%env(string:API_ASSETS_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $stripeSecret: "%env(STRIPE_SECRET)%"
            $webProjectDomain: '%env(WEB_PROJECT_DOMAIN)%'
            $apiProjectDomain: '%env(API_PROJECT_DOMAIN)%'
            $publicDir: '%public_dir%'
            $appEnv: '%app.env%'        #dev, test, prod
            $appServer: '%app.server%'  #dev, stage, prod
            $slackKey: '%slack.key%'
            $slackChannelError: '%slack.channel.error%'
            $streamKey: '%streamKey%'
            $streamSecret: '%streamSecret%'
            $payouSecret: "%env(PAYOU_SECRET)%"
            $payouDomain: '%env(PAYOU_DOMAIN)%'
            $payouMerchantId: '%env(PAYOU_MERCHANT_ID)%'
            $payouSistemsKey: '%env(PAYOU_SISTEMS_KEY)%'
            $mandrillWebhookKey: '%env(string:MANDRILL_WEBHOOK_KEY)%'
            $mandrillWebhookUrl: '%env(string:MANDRILL_WEBHOOK_URL)%'
            $publicUploadsDir: '%env(string:PUBLIC_UPLOADS_DIR)%'
            $publicUploadsPath: '%env(string:PUBLIC_UPLOADS_PATH)%'
            $projectDir: '%kernel.project_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Transformer\UlidUriVariableTransformer:
        tags:
            - { name: api_platform.uri_variables.transformer }

    App\Service\Utility\ProjectEmailAddressProvider:
        arguments:
            $email: '%projectEmail%'
            $name: '%projectEmailName%'

    Gesdinet\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener:
        alias: 'gesdinet.jwtrefreshtoken.send_token'
        public: true

    App\Service\Infrastructure\FFMpegService:
        arguments:
            $ffmpegBinariesPath: '%env(string:FFMPEG_BINARIES_PATH)%'
            $ffprobeBinariesPath: '%env(string:FFPROBE_BINARIES_PATH)%'

    App\Service\Infrastructure\RedisService:
        arguments:
            $redisIsEnable: '%env(bool:REDIS_IS_ENABLE)%'
            $redisQueueIsEnable: '%env(bool:REDIS_QUEUE_IS_ENABLE)%'

    App\Service\S3Service:
        arguments:
            $cdnDomain: '%cdn_domain%'
            $s3Bucket: '%s3_bucket%'
            $s3BackupBucket: '%s3_backup_bucket%'

    App\OpenApi\OpenApiFactory:
        decorates: lexik_jwt_authentication.api_platform.openapi.factory
        arguments:
#            $decorated: '@api_platform.openapi.factory'
            $decorated: '@lexik_jwt_authentication.api_platform.openapi.factory.inner'
            #$decoratedSecond: '@api_platform.openapi.factory'
            $checkPath: /api/user/login
            $usernamePath: email
            $passwordPath: password

    App\User\Service\UserAuthService:
        arguments:
            $authPass: '%env(string:JWT_AUTH_PASS)%'

    app.redis_service:
        class: App\Service\Infrastructure\RedisService
        arguments:
            $redisIsEnable: '%env(bool:REDIS_IS_ENABLE)%'
            $redisQueueIsEnable: '%env(bool:REDIS_QUEUE_IS_ENABLE)%'

    app.logger:
        class: App\Service\Infrastructure\LogService

    app.json_login_authenticator:
        class: App\Security\Infrastructure\AppJsonLoginAuthenticator
        arguments:
            $options:
                username_path: email
                password_path: password

    app.jwt_authenticator:
        class: App\Security\Infrastructure\AppJWTAuthenticator
        arguments:
            $jwtManager: '@lexik_jwt_authentication.jwt_manager'
            $eventDispatcher: '@event_dispatcher'
            $userProvider: '@security.user.provider.concrete.app_user_provider'
            $tokenExtractor: '@lexik_jwt_authentication.extractor.chain_extractor'
            $translator: '@translator'
            $redisService: '@app.redis_service'
            $logService: '@app.logger'
        parent: lexik_jwt_authentication.security.jwt_authenticator

    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    'App\EventListener\DeserializeListener':
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 2 }
        # Autoconfiguration must be disabled to set a custom priority
        autoconfigure: false
        decorates: 'api_platform.listener.request.deserialize'
        arguments:
            $decorated: '@App\EventListener\DeserializeListener.inner'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
